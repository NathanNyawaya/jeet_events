<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Aviator Crashed Plane</title>
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback" />
  <link rel="stylesheet" href="/plugins/fontawesome-free/css/all.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
  <link rel="stylesheet" href="/dist/css/adminlte.min.css" />
  <link rel="stylesheet" href="/css/admin.css" />
  <link href="//cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@4/dark.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous" />
  <style>
    body {
      font-family: 'Source Sans Pro', sans-serif;
    }

    .card-header {
      background-color: azure;
    }

    .error {
      color: red;
    }

    .is-invalid {
      border: 1px solid red;
    }

    .valid {
      border: 1px solid green;
    }

    thead {
      background-color: azure;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-weight: 700;
    }

    .switch {
      position: relative;
      display: inline-block;
      width: 60px;
      height: 34px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: .4s;
    }

    input:checked+.slider {
      background-color: #2196F3;
    }

    input:checked+.slider:before {
      transform: translateX(26px);
    }

    .slider.round {
      border-radius: 34px;
    }

    .slider.round:before {
      border-radius: 50%;
    }
  </style>
</head>

<body class="hold-transition sidebar-mini">
  <div class="wrapper">
    <%- include('nav') %>
      <div class="content-wrapper">

        <section class="content-body">

          <div class="container">
            <div class="row mt-4">
              <div class="col-12 col-lg-12">
                <div class="card radius-15">
                  <div class="card-body d-flex align-items-center" style="margin: 0px; padding: 0px;">
                    <iframe src="http://aviatorsmall.playdreamgame.com/" style="width: 100%; height: 300px; border: 0;"
                      title="aviator-pld"></iframe>
                  </div>
                </div>
              </div>
            </div>
          </div>



          <div class="container">
            <div class="card card-primary card-outline">
              <div class="card-header">
                <h3 class="card-title">Aviator Crashed Plane Settings</h3>
                <div class="card-tools">
                  <div class="btn-group">
                    <button type="button" class="btn btn-tool dropdown-toggle" data-toggle="dropdown">
                      <i class="fas fa-cog"></i>
                    </button>
                    <div class="dropdown-menu dropdown-menu-right" role="menu">
                      <a class="dropdown-item" href="#" data-func="unpin">Unpin</a>
                      <a class="dropdown-item" href="#" data-func="minimize">Minimize</a>
                      <a class="dropdown-item" href="#" data-func="expand">Fullscreen</a>
                    </div>
                  </div>
                </div>
              </div>

              <div style="overflow: hidden;">


                <div class="container-fluid mt-4">
                  <div class="row">
                    <div class="col-12 col-lg-2">
                      <div class="card radius-15">
                        <div class="card-body d-flex align-items-center">
                          <div>
                            <h4 class="mb-0 font-weight-bold" id="total-money">0</h4>
                            <p class="mb-0">Total Money</p>
                          </div>
                          <div class="widgets-icons bg-light-primary text-primary rounded-circle ms-auto">
                            <!-- SVG icon here -->
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="col-12 col-lg-2">
                      <div class="card radius-15">
                        <div class="card-body d-flex align-items-center">
                          <div>
                            <h4 class="mb-0 font-weight-bold" id="total-withdraw">0</h4>
                            <p class="mb-0">Withdraw Money</p>
                          </div>
                          <div class="widgets-icons bg-light-success text-success rounded-circle ms-auto">
                            <!-- SVG icon here -->
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="col-12 col-lg-2">
                      <div class="card radius-15">
                        <div class="card-body d-flex align-items-center">
                          <div>
                            <h4 class="mb-0 font-weight-bold" id="total-users">0</h4>
                            <p class="mb-0">Total Users</p>
                          </div>
                          <div class="widgets-icons bg-light-danger text-danger rounded-circle ms-auto">
                            <!-- SVG icon here -->
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="col-12 col-lg-2">
                      <div class="card radius-15">
                        <div class="card-body d-flex align-items-center">
                          <div>
                            <h4 class="mb-0 font-weight-bold" id="total-withdraw-users">0</h4>
                            <p class="mb-0" style="font-size: 14px;">Total Withdraw Users</p>
                          </div>
                          <div class="widgets-icons bg-light-info text-info rounded-circle ms-auto">
                            <!-- SVG icon here -->
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="col-12 col-lg-2">
                      <div class="card radius-15">
                        <div class="card-body d-flex align-items-center">
                          <div>
                            <h4 class="mb-0 font-weight-bold" id="all-bet-users">0</h4>
                            <p class="mb-0" style="font-size: 14px;">All Bet Users</p>
                          </div>
                          <div class="widgets-icons bg-light-info text-info rounded-circle ms-auto">
                            <!-- SVG icon here -->
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="col-12 col-lg-2">
                      <div class="card radius-15">
                        <div class="card-body d-flex align-items-center">
                          <div>
                            <h4 class="mb-0 font-weight-bold" id="total-bet-amount">0</h4>
                            <p class="mb-0" style="font-size: 14px;">Total Bet Amount</p>
                          </div>
                          <div class="widgets-icons bg-light-info text-info rounded-circle ms-auto">
                            <!-- SVG icon here -->
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>




                  <div class="wrapper mt-4 mb-4">
                    <div class="row">
                      <div class="col-md-4">
                        <button id="crashButton" class="custom-btn btn-4 text-center btn btn-success btn-block">Crash
                          Now</button>

                      </div>

                      <div id="crashspinner" class="spinner-border text-primary" role="status" style="display: none;">
                        <span class="sr-only">Loading...</span>
                      </div>

                      <div class="valid" id="crashspinnerP" style="border: none;"></div>



                    </div>

                    <hr />







                    <!-- Betting Toggle Button -->
                    <div class="wrapper mt-4 mb-4">
                      <div class="row">
                        <div class="col-md-12 text-start">
                          <h3>Enable/Disable Betting On Aviator</h3>
                        </div>
                      </div>
                      <div class="col-md-4">
                        <label class="switch">
                          <input type="checkbox" id="bettingToggle" onclick="toggleBetting()"
                            <%=settings.enable_betting===1 ? 'checked' : '' %>>
                          <span class="slider round"></span>
                        </label>
                        <!-- <span id="bettingStatus">Betting Disabled</span> -->
                        <div id="bettingToggleSpinner" class="spinner-border text-primary" role="status"
                          style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="bettingToggleError"></div>
                      </div>
                    </div>
                    <hr />





                    <form class="row g-3 needs-validation" novalidate id="only_1_user">
                      <p style="font-size: 20px; font-family: cursive;">1. If No User is Playing</p>
                      <div class="col-md-3">
                        <label for="validationCustom01" class="form-label">Lower Range</label>
                        <input placeholder="Enter..." value="<%= settings.nl %>" type="text" class="form-control"
                          id="only_1_user_lower_range" required min="1" max="10000" pattern="[1-9]\d{0,3}|10000"
                          oninvalid="showErrorMessage(event, 'Please enter a number between 1 and 10000.')" />
                        <div class="valid-feedback">Looks good!</div>
                        <div class="invalid-feedback">Please enter a number between 1 and 10000.</div>
                        <div id="only_1_user_lower_range_spinner" class="spinner-border text-primary" role="status"
                          style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="only_1_user_lower_range_error"></div>

                      </div>
                      <div class="col-md-3">
                        <label for="validationCustom02" class="form-label">Upper Range</label>
                        <input placeholder="Enter..." type="number" class="form-control" value="<%= settings.nh %>"
                          id="only_1_user_upper_range" required min="1" max="10000" pattern="[1-9]\d{0,3}|10000"
                          oninvalid="showErrorMessage(event, 'Please enter a number between 1 and 10000.')" />
                        <div class="valid-feedback">Looks good!</div>
                        <div class="invalid-feedback">Please enter a number between 1 and 10000.</div>
                        <div id="only_1_user_upper_range_spinner" class="spinner-border text-primary" role="status"
                          style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="only_1_user_upper_range_error"></div>

                      </div>
                      <div class="col-md-2 text-center crashnow-btn">

                      </div>
                      <div class="col-12">
                      </div>

                      <p style="font-size: 20px; font-family: cursive;">2. If (1, 2) User is Playing</p>

                      <div class="col-md-3">
                        <label for="validationCustom03" class="form-label">Lower Range</label>
                        <input placeholder="Enter..." type="text" class="form-control" id="_1_or_2_users_lower_range"
                          required min="1" value="<%= settings.sl %>" max="10000" pattern="[1-9]\d{0,3}|10000"
                          oninvalid="showErrorMessage('Please enter a number between 1 and 10000.')" />
                        <div class="valid-feedback">Looks good!</div>
                        <div id="_1_or_2_users_lower_range_spinner" class="spinner-border text-primary" role="status"
                          style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="_1_or_2_users_lower_range_error"></div>

                      </div>

                      <div class="col-md-3">
                        <label for="validationCustom04" class="form-label">Upper Range</label>
                        <input placeholder="Enter..." type="number" class="form-control" id="_1_or_2_users_upper_range"
                          required min="1" value="<%= settings.sh %>" max="10000" pattern="[1-9]\d{0,3}|10000"
                          oninvalid="showErrorMessage('Please enter a number between 1 and 10000.')" />
                        <div class="valid-feedback">Looks good!</div>
                        <div id="_1_or_2_users_upper_range_spinner" class="spinner-border text-primary" role="status"
                          style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="_1_or_2_users_upper_range_error"></div>

                      </div>

                      <div class="col-md-3">
                        <label for="validationCustom05" class="form-label">Probability</label>
                        <input placeholder="Enter..." type="text" class="form-control" id="_1_or_2_users_profitability"
                          required value="<%= settings.sp %>" min="10" max="100"
                          pattern="^(10|20|30|40|50|60|70|80|90|100)$"
                          oninvalid="showErrorMessage('Please enter a number that is a multiple of 10 and between 10 and 100.')" />
                        <div class="valid-feedback">Looks good!</div>
                        <div id="_1_or_2_users_profitability_spinner" class="spinner-border text-primary" role="status"
                          style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="_1_or_2_users_profitability_error"></div>

                      </div>

                      <div class="col-md-3">
                        <label for="validationCustom06" class="form-label">Single Max</label>
                        <input placeholder="Enter..." type="text" class="form-control" id="_1_or_2_users_single_max"
                          required min="1" max="10000" value="<%= settings.sm %>" pattern="^[1-9]\d*(\.\d+)?$"
                          oninvalid="showErrorMessage('Please enter a valid number.')" />
                        <div class="valid-feedback">Looks good!</div>
                        <div id="_1_or_2_users_single_max_spinner" class="spinner-border text-primary" role="status"
                          style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="_1_or_2_users_single_max_error"></div>

                      </div>

                      <div class="col-12">
                      </div>


                      <p style="font-size: 20px; font-family: cursive;">3. If more than 2 User is Playing</p>

                      <div class="col-md-2">
                        <label for="validationCustom07" class="form-label">Lower Range</label>
                        <input placeholder="Enter..." type="text" class="form-control"
                          id="more_than_2_users_lower_range" required min="1" max="10000" value="<%= settings.ml %>"
                          pattern="[1-9]\d{0,3}|10000"
                          oninvalid="showErrorMessage('Please enter a number between 1 and 10000.')" />
                        <div class="valid-feedback">Looks good!</div>
                        <div id="more_than_2_users_lower_range_spinner" class="spinner-border text-primary"
                          role="status" style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="more_than_2_users_lower_range_error"></div>

                      </div>

                      <div class="col-md-2">
                        <label for="validationCustom08" class="form-label">Upper Range</label>
                        <input placeholder="Enter..." type="number" class="form-control"
                          id="more_than_2_users_upper_range" required min="1" max="10000" value="<%= settings.mh %>"
                          pattern="[1-9]\d{0,3}|10000"
                          oninvalid="showErrorMessage('Please enter a number between 1 and 10000.')" />
                        <div class="valid-feedback">Looks good!</div>
                        <div id="more_than_2_users_upper_range_spinner" class="spinner-border text-primary"
                          role="status" style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="more_than_2_users_upper_range_error"></div>

                      </div>

                      <div class="col-md-4">
                        <label for="validationCustom09" class="form-label">Margin Ratio</label>
                        <div style="display: flex; gap: 10px; flex-direction: column; position: relative;">
                          <input placeholder="Enter..." type="text" class="form-control"
                            id="more_than_2_users_margin_ratio" value="<%= settings.mr %>" min="10" max="100"
                            pattern="^(10|20|30|40|50|60|70|80|90|100)$"
                            oninvalid="showErrorMessage('Please enter a number that is a multiple of 10 and between 10 to 100.')"
                            oninput="clearErrorMessage()" />
                          <div class="form-check form-switch lg-switch">
                            <input class="form-check-input" type="checkbox" role="switch" id="marginSwitch" />
                            <label class="form-check-label" for="marginSwitch"></label>
                          </div>
                        </div>
                        <div class="valid-feedback">Looks good!</div>
                        <div id="more_than_2_users_margin_ratio_spinner" class="spinner-border text-primary"
                          role="status" style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="more_than_2_users_margin_ratio_error"></div>

                      </div>

                      <div class="col-md-2">
                        <label for="validationCustom10" class="form-label">Admin Profit</label>
                        <input placeholder="Enter..." type="text" class="form-control"
                          id="more_than_2_users_admin_profit" value="<%= settings.da %>" required min="1" max="70"
                          pattern="^(70|[1-9][0-9]?)$"
                          oninvalid="showErrorMessage('Please enter a number between 1 and 70.')" />
                        <div class="valid-feedback">Looks good!</div>
                        <div id="more_than_2_users_admin_profit_spinner" class="spinner-border text-primary"
                          role="status" style="display: none;">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <div class="error" id="more_than_2_users_admin_profit_error"></div>

                      </div>

                      <div class="col-12">
                        <!-- <button class="btn btn-primary" id="saveData" type="submit">Submit</button> -->
                      </div>
                    </form>



                  </div>
                </div>
              </div>

            </div>



          </div>




        </section>







      </div>


  </div>

  <script src="/plugins/jquery/jquery.min.js"></script>
  <script src="/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="/dist/js/adminlte.min.js"></script>
  <script src="/js/admin/admin.js"></script>
  <script src="//cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

  <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>

  <script>
    function showErrorMessage(message) {
      alert(message);
    }

    function clearErrorMessage() {
      // Function to clear custom validity messages
    }

    function handleSubmits(event) {
      event.preventDefault();
      // Add your form submission logic here
    }
  </script>

  <script>
    function showErrorMessage(message) {
      alert(message);
    }

    function handleSubmits(event) {
      event.preventDefault();
      // Add your form submission logic here
    }
  </script>


  <script>
    let errorMessageShown = false;

    function showErrorMessage(message) {
      if (!errorMessageShown) {
        alert(message);
        errorMessageShown = true;
      }
    }


    async function handleSubmit(event) {
      event.preventDefault();

      const form = event.target;
      const formData = new FormData(form);

      try {
        const response = await fetch('/admin/getcrashed', {
          method: 'POST',
          body: formData
        });

        if (!response.ok) {
          throw new Error('Failed to save form data');
        }

        const data = await response.json();
        console.log(data);
        alert('Form data saved successfully!');
      } catch (error) {
        console.error(error);
        alert('Error occurred while saving form data!');
      }
    }

    async function handleSubmits(event) {
      event.preventDefault();

      const form = event.target;
      const formData = new FormData(form);

      try {
        const response = await fetch('/admin/getcurrentbet', {
          method: 'POST',
          body: formData
        });

        if (!response.ok) {
          throw new Error('Failed to save form data');
        }

        const data = await response.json();
        console.log(data);
        alert('Form data saved successfully!');
      } catch (error) {
        console.error(error);
        alert('Error occurred while saving form data!');
      }
    }

    function socketHandler() {
      // Function to handle socket request
    }
  </script>



  <script>
    $(document).ready(function () {


      $.ajax({
        type: "GET",
        url: "/admin/getAllAviatorData",
        success: function (response) {
          console.log(response);
          console.log('RRRRRRRRRRRRRRRRRRRRRRRRRRRRR');

          // Extracting data from the response object
          const data = response.data;

          // Updating HTML elements with the received data
          $('#total-money').text(data.totalBetAmount);
          $('#total-withdraw').text(data.totalWithdrawalAmount);
          $('#total-users').text(data.totalBets);
          $('#total-withdraw-users').text(data.totalWithdrawals);
          $('#all-bet-users').text(data.totalAllBetUsers);
          $('#total-bet-amount').text(data.totalBetAmount);

          // If you have other fields to update, you can do it similarly
          // For example, if you need to update a crashed plane data section
          // $('#crashed-nl').text(data.crashed.nl);
          // $('#crashed-nh').text(data.crashed.nh);
          // ... (continue for other crashed data fields)
        },
        error: function (err) {
          console.error("Error fetching aviator data:", err);
        }
      });



      $('#saveData').click(async function (e) {
        e.preventDefault();
        // Show spinner
        $('#spinner').show();

        // Extract form data
        let only_1_user_upper_range = $('#only_1_user_upper_range').val().trim();
        let only_1_user_lower_range = $('#only_1_user_lower_range').val().trim();
        let _1_or_2_users_single_max = $('#_1_or_2_users_single_max').val().trim();
        let _1_or_2_users_profitability = $('#_1_or_2_users_profitability').val().trim();
        let _1_or_2_users_upper_range = $('#_1_or_2_users_upper_range').val().trim();
        let _1_or_2_users_lower_range = $('#_1_or_2_users_lower_range').val().trim();
        let more_than_2_users_admin_profit = $('#more_than_2_users_admin_profit').val().trim();
        let more_than_2_users_margin_ratio = $('#more_than_2_users_margin_ratio').val().trim();
        let more_than_2_users_upper_range = $('#more_than_2_users_upper_range').val().trim();
        let more_than_2_users_lower_range = $('#more_than_2_users_lower_range').val().trim();
        // Construct payload object
        let payload = {
          nh: only_1_user_upper_range,
          nl: only_1_user_lower_range,
          sm: _1_or_2_users_single_max,
          sp: _1_or_2_users_profitability,
          sl: _1_or_2_users_lower_range,
          sh: _1_or_2_users_upper_range,
          da: more_than_2_users_admin_profit,
          mr: more_than_2_users_margin_ratio,
          mh: more_than_2_users_upper_range,
          ml: more_than_2_users_lower_range,
        };
        console.log(payload);

        // Send AJAX request to update payment settings
        $.ajax({
          url: '/admin/updateCrashData',
          type: 'POST',
          data: JSON.stringify(payload),
          contentType: "application/json",
          success: function (response) {
            console.log(response);
            $('#spinner').hide();
            Swal.fire({
              title: 'Success!',
              text: 'Payment settings have been saved successfully.',
              icon: 'success',
              confirmButtonText: 'OK'
            });
          },
          error: function (xhr, status, error) {
            console.log(xhr, status, error);
            $('#spinner').hide();
            Swal.fire({
              title: 'Error!',
              text: 'There was an error saving the payment settings.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        });
      });

    });


    // Function to set QR code image source and show modal
    function showQRCodeModal(imageSrc, modalId) {
      var modal = $(modalId);
      modal.find('img').attr('src', imageSrc);
      modal.modal('show');
    }

    function toBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
      });
    }

    // Set click event handlers for view buttons
    $('#upi-qr-view-btn').click(function () {
      showQRCodeModal('<%= settings.qrCodeUrl %>', '#upiQRModal');
    });

    $('#usdt-qr-view-btn').click(function () {
      showQRCodeModal('<%= settings.usdtQrCodeUrl %>', '#usdtQRModal');
    });
  </script>


  <script>
    $(document).ready(function () {

      async function handleInputBlur(inputId) {
        const spinnerId = `#${inputId}_spinner`;
        const errorId = `#${inputId}_error`;

        $(spinnerId).show();

        // Extract form data
        let only_1_user_upper_range = $('#only_1_user_upper_range').val().trim();
        let only_1_user_lower_range = $('#only_1_user_lower_range').val().trim();
        let _1_or_2_users_single_max = $('#_1_or_2_users_single_max').val().trim();
        let _1_or_2_users_profitability = $('#_1_or_2_users_profitability').val().trim();
        let _1_or_2_users_upper_range = $('#_1_or_2_users_upper_range').val().trim();
        let _1_or_2_users_lower_range = $('#_1_or_2_users_lower_range').val().trim();
        let more_than_2_users_admin_profit = $('#more_than_2_users_admin_profit').val().trim();
        let more_than_2_users_margin_ratio = $('#more_than_2_users_margin_ratio').val().trim();
        let more_than_2_users_upper_range = $('#more_than_2_users_upper_range').val().trim();
        let more_than_2_users_lower_range = $('#more_than_2_users_lower_range').val().trim();
        // Construct payload object
        let payload = {
          nh: only_1_user_upper_range,
          nl: only_1_user_lower_range,
          sm: _1_or_2_users_single_max,
          sp: _1_or_2_users_profitability,
          sl: _1_or_2_users_lower_range,
          sh: _1_or_2_users_upper_range,
          da: more_than_2_users_admin_profit,
          mr: more_than_2_users_margin_ratio,
          mh: more_than_2_users_upper_range,
          ml: more_than_2_users_lower_range,
        };
        console.log(payload);

        $.ajax({
          url: '/admin/updateCrashData',
          type: 'POST',
          data: JSON.stringify(payload),
          contentType: "application/json",
          success: function (response) {
            console.log(response);
            $(spinnerId).hide();
            $(errorId).text('');
          },
          error: function (xhr, status, error) {
            $(spinnerId).hide();
            $(errorId).text('There was an error saving the aviator settings.');
          }
        });
      }

      $('input').blur(function () {
        if (this.checkValidity()) {
          $(this).addClass('valid');
          handleInputBlur(this.id);
        } else {
          // If input is invalid, add is-invalid class to make it red
          $(this).addClass('is-invalid');
        }
      });

      $('#saveChanges').click(function (e) {
        e.preventDefault();
        $('input').each(function () {
          handleInputBlur(this.id);
        });
      });



    });
  </script>


  <script>
    document.getElementById('only_1_user_lower_range').addEventListener('input', function (event) {
      var input = event.target;
      var validityMessage = '';

      // Check if value is a number between 1 and 10000
      if (!input.value.match(/^[1-9]\d{0,3}$|10000/) || parseInt(input.value) < 1 || parseInt(input.value) > 10000) {
        validityMessage = 'Please enter a number between 1 and 10000.';
      }

      // Set custom validity message if invalid
      input.setCustomValidity(validityMessage);

      // Show error message if invalid
      if (!input.checkValidity()) {
        showErrorMessage(event, validityMessage);
      }
    });


    document.getElementById('only_1_user_upper_range').addEventListener('input', function (event) {
      var input = event.target;
      var validityMessage = '';

      // Check if value is a number between 1 and 10000
      if (!input.value.match(/^[1-9]\d{0,3}$|10000/) || parseInt(input.value) < 1 || parseInt(input.value) > 10000) {
        validityMessage = 'Please enter a number between 1 and 10000.';
      }

      // Set custom validity message if invalid
      input.setCustomValidity(validityMessage);

      // Show error message if invalid
      if (!input.checkValidity()) {
        showErrorMessage(event, validityMessage);
      }
    });


    // Validation for _1_or_2_users_lower_range
    document.getElementById('_1_or_2_users_lower_range').addEventListener('input', function (event) {
      var input = event.target;
      var validityMessage = '';

      // Check if value is a number between 1 and 10000
      if (!input.value.match(/^[1-9]\d{0,3}$|10000/) || parseInt(input.value) < 1 || parseInt(input.value) > 10000) {
        validityMessage = 'Please enter a number between 1 and 10000.';
      }

      // Set custom validity message if invalid
      input.setCustomValidity(validityMessage);

      // Show error message if invalid
      if (!input.checkValidity()) {
        showErrorMessage(event, validityMessage);
      }
    });

    // Validation for _1_or_2_users_upper_range
    document.getElementById('_1_or_2_users_upper_range').addEventListener('input', function (event) {
      var input = event.target;
      var validityMessage = '';

      // Check if value is a number between 1 and 10000
      if (!input.value.match(/^[1-9]\d{0,3}$|10000/) || parseInt(input.value) < 1 || parseInt(input.value) > 10000) {
        validityMessage = 'Please enter a number between 1 and 10000.';
      }

      // Set custom validity message if invalid
      input.setCustomValidity(validityMessage);

      // Show error message if invalid
      if (!input.checkValidity()) {
        showErrorMessage(event, validityMessage);
      }
    });

    // Validation for _1_or_2_users_profitability
    document.getElementById('_1_or_2_users_profitability').addEventListener('input', function (event) {
      var input = event.target;
      var validityMessage = '';

      // Check if value is a multiple of 10 and between 10 and 100
      if (!input.value.match(/^(10|20|30|40|50|60|70|80|90|100)$/)) {
        validityMessage = 'Please enter a number that is a multiple of 10 and between 10 and 100.';
      }

      // Set custom validity message if invalid
      input.setCustomValidity(validityMessage);

      // Show error message if invalid
      if (!input.checkValidity()) {
        showErrorMessage(event, validityMessage);
      }
    });

    // Validation for _1_or_2_users_single_max
    document.getElementById('_1_or_2_users_single_max').addEventListener('input', function (event) {
      var input = event.target;
      var validityMessage = '';

      // Check if value is a valid number
      if (!input.value.match(/^[1-9]\d*(\.\d+)?$/)) {
        validityMessage = 'Please enter a valid number.';
      }

      // Set custom validity message if invalid
      input.setCustomValidity(validityMessage);

      // Show error message if invalid
      if (!input.checkValidity()) {
        showErrorMessage(event, validityMessage);
      }
    });

    // Validation for more_than_2_users_lower_range
    document.getElementById('more_than_2_users_lower_range').addEventListener('input', function (event) {
      var input = event.target;
      var validityMessage = '';

      // Check if value is a number between 1 and 10000
      if (!input.value.match(/^[1-9]\d{0,3}$|10000/) || parseInt(input.value) < 1 || parseInt(input.value) > 10000) {
        validityMessage = 'Please enter a number between 1 and 10000.';
      }

      // Set custom validity message if invalid
      input.setCustomValidity(validityMessage);

      // Show error message if invalid
      if (!input.checkValidity()) {
        showErrorMessage(event, validityMessage);
      }
    });

    // Validation for more_than_2_users_upper_range
    document.getElementById('more_than_2_users_upper_range').addEventListener('input', function (event) {
      var input = event.target;
      var validityMessage = '';

      // Check if value is a number between 1 and 10000
      if (!input.value.match(/^[1-9]\d{0,3}$|10000/) || parseInt(input.value) < 1 || parseInt(input.value) > 10000) {
        validityMessage = 'Please enter a number between 1 and 10000.';
      }

      // Set custom validity message if invalid
      input.setCustomValidity(validityMessage);

      // Show error message if invalid
      if (!input.checkValidity()) {
        showErrorMessage(event, validityMessage);
      }
    });

    // Validation for more_than_2_users_margin_ratio
    document.getElementById('more_than_2_users_margin_ratio').addEventListener('input', function (event) {
      var input = event.target;
      var validityMessage = '';

      // Check if value is a multiple of 10 and between 10 and 100
      if (!input.value.match(/^(10|20|30|40|50|60|70|80|90|100)$/)) {
        validityMessage = 'Please enter a number that is a multiple of 10 and between 10 to 100.';
      }

      // Set custom validity message if invalid
      input.setCustomValidity(validityMessage);

      // Show error message if invalid
      if (!input.checkValidity()) {
        showErrorMessage(event, validityMessage);
      }
    });

    // Validation for more_than_2_users_admin_profit
    document.getElementById('more_than_2_users_admin_profit').addEventListener('input', function (event) {
      var input = event.target;
      var validityMessage = '';

      // Check if value is between 1 and 70
      if (!input.value.match(/^(70|[1-9][0-9]?)$/)) {
        validityMessage = 'Please enter a number between 1 and 70.';
      }

      // Set custom validity message if invalid
      input.setCustomValidity(validityMessage);

      // Show error message if invalid
      if (!input.checkValidity()) {
        showErrorMessage(event, validityMessage);
      }
    });



  </script>


  <script>
    $("#crashButton").click(function () {
      $.ajax({
        url: '/api/webapi/admin/updateAndCrash', // Replace with your endpoint URL
        type: 'POST', // or 'GET' depending on your endpoint requirements
        data: {
          // Data to be sent to the server
          // key1: 'value1',
          // key2: 'value2'
        },
        beforeSend: function () {
          // Show spinner or perform actions before sending the request
          $("#crashspinner").show();
        },
        success: function (response) {
          // Handle the response from the server
          console.log('Success:', response);
          $("#crashspinnerP").html('Plane Crashed');

          setTimeout(() => {
            console.log("This message will be printed after 2 seconds.");
            $("#crashspinnerP").html('');

          }, 2000);

          // Optionally, update the DOM or perform other actions
        },
        error: function (xhr, status, error) {
          // Handle any errors
          console.log('Error:', xhr);
          console.log('Error:', status);
          console.log('Error:', error);

        },

        complete: function () {
          // Hide the spinner or perform actions after the request is complete
          $("#crashspinner").hide();
        }
      });


    });





  </script>

<script>
  function toggleBetting() {
    const bettingToggle = document.getElementById('bettingToggle');
    const enableBetting = bettingToggle.checked ? 1 : 0; // 1 for checked, 0 for unchecked

    $.ajax({
      url: '/api/webapi/admin/enableBettingOnAviator', // Replace with your endpoint URL
      type: 'POST', // or 'GET' depending on your endpoint requirements
      data: {
        enable_betting: enableBetting // Send the current state of the toggle button
      },
      beforeSend: function () {
        // Show spinner or perform actions before sending the request
        $("#bettingToggleSpinner").show();
        $("#bettingToggleError").hide();
      },
      success: function (response) {
        // Handle the response from the server
        console.log('Success:', response);
        $("#bettingToggleError").html('Failed To Update');

        Swal.fire({
          title: 'Success!',
          text: 'Payment settings have been saved successfully.',
          icon: 'success',
          confirmButtonText: 'OK'
        });
        setTimeout(() => {
          console.log("This message will be printed after 2 seconds.");

        }, 2000);

        // Optionally, update the DOM or perform other actions
      },
      error: function (xhr, status, error) {
        // Handle any errors
        console.log('Error:', xhr);
        console.log('Error:', status);
        console.log('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Payment settings have been saved successfully.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      },
      complete: function () {
        // Hide the spinner or perform actions after the request is complete
        $("#bettingToggleSpinner").hide();
      }
    });

    console.log('Betting state updated');
  }
</script>



</body>

</html>